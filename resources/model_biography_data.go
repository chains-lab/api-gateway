/*
Chains API

Chains API

API version: 0.0.1
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package resources

import (
	"encoding/json"
	"bytes"
	"fmt"
)

// checks if the BiographyData type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &BiographyData{}

// BiographyData struct for BiographyData
type BiographyData struct {
	// User ID of the elector.
	Id string `json:"id"`
	Type string `json:"type"`
	Attributes BiographyAttributes `json:"attributes"`
}

type _BiographyData BiographyData

// NewBiographyData instantiates a new BiographyData object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewBiographyData(id string, type_ string, attributes BiographyAttributes) *BiographyData {
	this := BiographyData{}
	this.Id = id
	this.Type = type_
	this.Attributes = attributes
	return &this
}

// NewBiographyDataWithDefaults instantiates a new BiographyData object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewBiographyDataWithDefaults() *BiographyData {
	this := BiographyData{}
	return &this
}

// GetId returns the Id field value
func (o *BiographyData) GetId() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Id
}

// GetIdOk returns a tuple with the Id field value
// and a boolean to check if the value has been set.
func (o *BiographyData) GetIdOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Id, true
}

// SetId sets field value
func (o *BiographyData) SetId(v string) {
	o.Id = v
}

// GetType returns the Type field value
func (o *BiographyData) GetType() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Type
}

// GetTypeOk returns a tuple with the Type field value
// and a boolean to check if the value has been set.
func (o *BiographyData) GetTypeOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Type, true
}

// SetType sets field value
func (o *BiographyData) SetType(v string) {
	o.Type = v
}

// GetAttributes returns the Attributes field value
func (o *BiographyData) GetAttributes() BiographyAttributes {
	if o == nil {
		var ret BiographyAttributes
		return ret
	}

	return o.Attributes
}

// GetAttributesOk returns a tuple with the Attributes field value
// and a boolean to check if the value has been set.
func (o *BiographyData) GetAttributesOk() (*BiographyAttributes, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Attributes, true
}

// SetAttributes sets field value
func (o *BiographyData) SetAttributes(v BiographyAttributes) {
	o.Attributes = v
}

func (o BiographyData) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o BiographyData) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["id"] = o.Id
	toSerialize["type"] = o.Type
	toSerialize["attributes"] = o.Attributes
	return toSerialize, nil
}

func (o *BiographyData) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"id",
		"type",
		"attributes",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varBiographyData := _BiographyData{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varBiographyData)

	if err != nil {
		return err
	}

	*o = BiographyData(varBiographyData)

	return err
}

type NullableBiographyData struct {
	value *BiographyData
	isSet bool
}

func (v NullableBiographyData) Get() *BiographyData {
	return v.value
}

func (v *NullableBiographyData) Set(val *BiographyData) {
	v.value = val
	v.isSet = true
}

func (v NullableBiographyData) IsSet() bool {
	return v.isSet
}

func (v *NullableBiographyData) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableBiographyData(val *BiographyData) *NullableBiographyData {
	return &NullableBiographyData{value: val, isSet: true}
}

func (v NullableBiographyData) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableBiographyData) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


