/*
Chains API

Chains API

API version: 0.0.1
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package resources

import (
	"encoding/json"
	"time"
)

// checks if the BiographyAttributes type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &BiographyAttributes{}

// BiographyAttributes struct for BiographyAttributes
type BiographyAttributes struct {
	// The birth date of the elector.
	Birthday *time.Time `json:"birthday,omitempty"`
	// sex of the elector
	Sex *string `json:"sex,omitempty"`
	// The city where the elector resides.
	City *string `json:"city,omitempty"`
	// The region where the elector resides.
	Region *string `json:"region,omitempty"`
	// The country where the elector resides.
	Country *string `json:"country,omitempty"`
	SexUpdatedAt *time.Time `json:"sex_updated_at,omitempty"`
	ResidenceUpdatedAt *time.Time `json:"residence_updated_at,omitempty"`
}

// NewBiographyAttributes instantiates a new BiographyAttributes object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewBiographyAttributes() *BiographyAttributes {
	this := BiographyAttributes{}
	return &this
}

// NewBiographyAttributesWithDefaults instantiates a new BiographyAttributes object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewBiographyAttributesWithDefaults() *BiographyAttributes {
	this := BiographyAttributes{}
	return &this
}

// GetBirthday returns the Birthday field value if set, zero value otherwise.
func (o *BiographyAttributes) GetBirthday() time.Time {
	if o == nil || IsNil(o.Birthday) {
		var ret time.Time
		return ret
	}
	return *o.Birthday
}

// GetBirthdayOk returns a tuple with the Birthday field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *BiographyAttributes) GetBirthdayOk() (*time.Time, bool) {
	if o == nil || IsNil(o.Birthday) {
		return nil, false
	}
	return o.Birthday, true
}

// HasBirthday returns a boolean if a field has been set.
func (o *BiographyAttributes) HasBirthday() bool {
	if o != nil && !IsNil(o.Birthday) {
		return true
	}

	return false
}

// SetBirthday gets a reference to the given time.Time and assigns it to the Birthday field.
func (o *BiographyAttributes) SetBirthday(v time.Time) {
	o.Birthday = &v
}

// GetSex returns the Sex field value if set, zero value otherwise.
func (o *BiographyAttributes) GetSex() string {
	if o == nil || IsNil(o.Sex) {
		var ret string
		return ret
	}
	return *o.Sex
}

// GetSexOk returns a tuple with the Sex field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *BiographyAttributes) GetSexOk() (*string, bool) {
	if o == nil || IsNil(o.Sex) {
		return nil, false
	}
	return o.Sex, true
}

// HasSex returns a boolean if a field has been set.
func (o *BiographyAttributes) HasSex() bool {
	if o != nil && !IsNil(o.Sex) {
		return true
	}

	return false
}

// SetSex gets a reference to the given string and assigns it to the Sex field.
func (o *BiographyAttributes) SetSex(v string) {
	o.Sex = &v
}

// GetCity returns the City field value if set, zero value otherwise.
func (o *BiographyAttributes) GetCity() string {
	if o == nil || IsNil(o.City) {
		var ret string
		return ret
	}
	return *o.City
}

// GetCityOk returns a tuple with the City field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *BiographyAttributes) GetCityOk() (*string, bool) {
	if o == nil || IsNil(o.City) {
		return nil, false
	}
	return o.City, true
}

// HasCity returns a boolean if a field has been set.
func (o *BiographyAttributes) HasCity() bool {
	if o != nil && !IsNil(o.City) {
		return true
	}

	return false
}

// SetCity gets a reference to the given string and assigns it to the City field.
func (o *BiographyAttributes) SetCity(v string) {
	o.City = &v
}

// GetRegion returns the Region field value if set, zero value otherwise.
func (o *BiographyAttributes) GetRegion() string {
	if o == nil || IsNil(o.Region) {
		var ret string
		return ret
	}
	return *o.Region
}

// GetRegionOk returns a tuple with the Region field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *BiographyAttributes) GetRegionOk() (*string, bool) {
	if o == nil || IsNil(o.Region) {
		return nil, false
	}
	return o.Region, true
}

// HasRegion returns a boolean if a field has been set.
func (o *BiographyAttributes) HasRegion() bool {
	if o != nil && !IsNil(o.Region) {
		return true
	}

	return false
}

// SetRegion gets a reference to the given string and assigns it to the Region field.
func (o *BiographyAttributes) SetRegion(v string) {
	o.Region = &v
}

// GetCountry returns the Country field value if set, zero value otherwise.
func (o *BiographyAttributes) GetCountry() string {
	if o == nil || IsNil(o.Country) {
		var ret string
		return ret
	}
	return *o.Country
}

// GetCountryOk returns a tuple with the Country field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *BiographyAttributes) GetCountryOk() (*string, bool) {
	if o == nil || IsNil(o.Country) {
		return nil, false
	}
	return o.Country, true
}

// HasCountry returns a boolean if a field has been set.
func (o *BiographyAttributes) HasCountry() bool {
	if o != nil && !IsNil(o.Country) {
		return true
	}

	return false
}

// SetCountry gets a reference to the given string and assigns it to the Country field.
func (o *BiographyAttributes) SetCountry(v string) {
	o.Country = &v
}

// GetSexUpdatedAt returns the SexUpdatedAt field value if set, zero value otherwise.
func (o *BiographyAttributes) GetSexUpdatedAt() time.Time {
	if o == nil || IsNil(o.SexUpdatedAt) {
		var ret time.Time
		return ret
	}
	return *o.SexUpdatedAt
}

// GetSexUpdatedAtOk returns a tuple with the SexUpdatedAt field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *BiographyAttributes) GetSexUpdatedAtOk() (*time.Time, bool) {
	if o == nil || IsNil(o.SexUpdatedAt) {
		return nil, false
	}
	return o.SexUpdatedAt, true
}

// HasSexUpdatedAt returns a boolean if a field has been set.
func (o *BiographyAttributes) HasSexUpdatedAt() bool {
	if o != nil && !IsNil(o.SexUpdatedAt) {
		return true
	}

	return false
}

// SetSexUpdatedAt gets a reference to the given time.Time and assigns it to the SexUpdatedAt field.
func (o *BiographyAttributes) SetSexUpdatedAt(v time.Time) {
	o.SexUpdatedAt = &v
}

// GetResidenceUpdatedAt returns the ResidenceUpdatedAt field value if set, zero value otherwise.
func (o *BiographyAttributes) GetResidenceUpdatedAt() time.Time {
	if o == nil || IsNil(o.ResidenceUpdatedAt) {
		var ret time.Time
		return ret
	}
	return *o.ResidenceUpdatedAt
}

// GetResidenceUpdatedAtOk returns a tuple with the ResidenceUpdatedAt field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *BiographyAttributes) GetResidenceUpdatedAtOk() (*time.Time, bool) {
	if o == nil || IsNil(o.ResidenceUpdatedAt) {
		return nil, false
	}
	return o.ResidenceUpdatedAt, true
}

// HasResidenceUpdatedAt returns a boolean if a field has been set.
func (o *BiographyAttributes) HasResidenceUpdatedAt() bool {
	if o != nil && !IsNil(o.ResidenceUpdatedAt) {
		return true
	}

	return false
}

// SetResidenceUpdatedAt gets a reference to the given time.Time and assigns it to the ResidenceUpdatedAt field.
func (o *BiographyAttributes) SetResidenceUpdatedAt(v time.Time) {
	o.ResidenceUpdatedAt = &v
}

func (o BiographyAttributes) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o BiographyAttributes) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Birthday) {
		toSerialize["birthday"] = o.Birthday
	}
	if !IsNil(o.Sex) {
		toSerialize["sex"] = o.Sex
	}
	if !IsNil(o.City) {
		toSerialize["city"] = o.City
	}
	if !IsNil(o.Region) {
		toSerialize["region"] = o.Region
	}
	if !IsNil(o.Country) {
		toSerialize["country"] = o.Country
	}
	if !IsNil(o.SexUpdatedAt) {
		toSerialize["sex_updated_at"] = o.SexUpdatedAt
	}
	if !IsNil(o.ResidenceUpdatedAt) {
		toSerialize["residence_updated_at"] = o.ResidenceUpdatedAt
	}
	return toSerialize, nil
}

type NullableBiographyAttributes struct {
	value *BiographyAttributes
	isSet bool
}

func (v NullableBiographyAttributes) Get() *BiographyAttributes {
	return v.value
}

func (v *NullableBiographyAttributes) Set(val *BiographyAttributes) {
	v.value = val
	v.isSet = true
}

func (v NullableBiographyAttributes) IsSet() bool {
	return v.isSet
}

func (v *NullableBiographyAttributes) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableBiographyAttributes(val *BiographyAttributes) *NullableBiographyAttributes {
	return &NullableBiographyAttributes{value: val, isSet: true}
}

func (v NullableBiographyAttributes) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableBiographyAttributes) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


