openapi: 3.1.1
info:
  description: Chains API
  title: Chains API
  version: 0.0.1
servers:
- url: /
paths: {}
components:
  responses:
    Internal:
      content:
        application/json:
          examples:
            default:
              summary: Internal Server Error
              value:
                errors:
                - status: 500
                  title: Internal Server Error
                  code: INTERNAL_SERVER_ERROR
                  detail: internal server error
                  meta:
                    request_id: 1234567890abcdef
                    timestamp: 2025-07-10T14:23:00Z
          schema:
            $ref: "#/components/schemas/Errors"
      description: Internal Server Error
    UnsupportedMediaType:
      content:
        application/vnd.api+json:
          examples:
            default:
              summary: Unsupported Media Type Error
              value:
                errors:
                - status: 415
                  title: Unsupported Media Type
                  code: UNSUPPORTED_MEDIA_TYPE
                  detail: unsupported media type
                  meta:
                    request_id: 1234567890abcdef
                    timestamp: 2025-07-10T14:23:00Z
          schema:
            $ref: "#/components/schemas/Errors"
      description: Unsupported Media Type
    BadRequest:
      content:
        application/json:
          examples:
            default:
              summary: Bad Request Error
              value:
                errors:
                - status: 400
                  title: Bad Request
                  code: BAD_REQUEST
                  detail: bad request
                  meta:
                    request_id: 1234567890abcdef
                    timestamp: 2025-07-10T14:23:00Z
          schema:
            $ref: "#/components/schemas/Errors"
      description: Bad Request
    Unauthorized:
      content:
        application/json:
          examples:
            default:
              summary: Unauthorized
              value:
                errors:
                - status: 401
                  title: Unauthorized
                  code: UNAUTHORIZED
                  detail: You must provide a valid authorization params.
                  meta:
                    request_id: 1234567890abcdef
                    timestamp: 2025-07-10T14:23:00Z
          schema:
            $ref: "#/components/schemas/Errors"
      description: Unauthorized
    NoPermissions:
      content:
        application/json:
          examples:
            default:
              summary: Permission denied
              value:
                errors:
                - status: 403
                  title: Forbidden
                  code: NO_PERMISSIONS
                  detail: no permission to perform this action
                  meta:
                    request_id: 1234567890abcdef
                    timestamp: 2025-07-10T14:23:00Z
          schema:
            $ref: "#/components/schemas/Errors"
      description: No permission to perform action
    SessionClientMismatch:
      content:
        application/json:
          examples:
            default:
              summary: Mismatched session client
              value:
                errors:
                - status: 400
                  title: Bad Request
                  code: SESSION_CLIENT_MISMATCH
                  detail: session client mismatch
                  meta:
                    request_id: 1234567890abcdef
                    timestamp: 2025-07-10T14:23:00Z
          schema:
            $ref: "#/components/schemas/Errors"
      description: Session client mismatch
    SessionDoesNotBelongToUser:
      content:
        application/json:
          examples:
            default:
              summary: Session ownership error
              value:
                errors:
                - status: 403
                  title: Forbidden
                  code: SESSION_DOES_NOT_BELONG_TO_USER
                  detail: "session {session_id} does not belong to user {user_id}"
                  meta:
                    request_id: 1234567890abcdef
                    timestamp: 2025-07-10T14:23:00Z
          schema:
            $ref: "#/components/schemas/Errors"
      description: Session does not belong to user
    SessionNotFound:
      content:
        application/json:
          examples:
            default:
              summary: Session not found
              value:
                errors:
                - status: 404
                  title: Not Found
                  code: SESSION_NOT_FOUND
                  detail: "session {session_id} not found"
                  meta:
                    request_id: 1234567890abcdef
                    timestamp: 2025-07-10T14:23:00Z
          schema:
            $ref: "#/components/schemas/Errors"
      description: Session not found
    SessionsForUserNotFound:
      content:
        application/json:
          examples:
            default:
              summary: No sessions found for this user
              value:
                errors:
                - status: 404
                  title: Not Found
                  code: SESSIONS_FOR_USER_NOT_FOUND
                  detail: "no sessions found for user {user_id}"
                  meta:
                    request_id: 1234567890abcdef
                    timestamp: 2025-07-10T14:23:00Z
          schema:
            $ref: "#/components/schemas/Errors"
      description: No sessions for user
    SessionTokenMismatch:
      content:
        application/json:
          examples:
            default:
              summary: Mismatched session token
              value:
                errors:
                - status: 400
                  title: Bad Request
                  code: SESSION_TOKEN_MISMATCH
                  detail: session token mismatch
                  meta:
                    request_id: 1234567890abcdef
                    timestamp: 2025-07-10T14:23:00Z
          schema:
            $ref: "#/components/schemas/Errors"
      description: Session token mismatch
    UserAlreadyExists:
      content:
        application/json:
          examples:
            default:
              summary: User exists
              value:
                errors:
                - status: 409
                  title: Conflict
                  code: USER_ALREADY_EXISTS
                  detail: user already exists
                  meta:
                    request_id: 1234567890abcdef
                    timestamp: 2025-07-10T14:23:00Z
          schema:
            $ref: "#/components/schemas/Errors"
      description: User already exists
    UserNotFound:
      content:
        application/json:
          examples:
            default:
              summary: User not found
              value:
                errors:
                - status: 404
                  title: Not Found
                  code: USER_NOT_FOUND
                  detail: "user {user_id} not found"
                  meta:
                    request_id: 1234567890abcdef
                    timestamp: 2025-07-10T14:23:00Z
          schema:
            $ref: "#/components/schemas/Errors"
      description: User not found
    UserSuspended:
      content:
        application/json:
          examples:
            default:
              summary: Suspended user
              value:
                errors:
                - status: 400
                  title: Bad Request
                  code: USER_SUSPENDED
                  detail: "user {user_id} is suspended"
                  meta:
                    request_id: 1234567890abcdef
                    timestamp: 2025-07-10T14:23:00Z
          schema:
            $ref: "#/components/schemas/Errors"
      description: User account suspended
    BirthdayIsAlreadySet:
      content:
        application/json:
          examples:
            default:
              summary: Birthday locked
              value:
                errors:
                - status: 400
                  title: Bad Request
                  code: BIRTHDAY_IS_ALREADY_SET
                  detail: birthday is already set and cannot be changed
                  meta:
                    request_id: 1234567890abcdef
                    timestamp: 2025-07-10T14:23:00Z
          schema:
            $ref: "#/components/schemas/Errors"
      description: Birthday already set
    BirthdayIsNotValid:
      content:
        application/json:
          examples:
            default:
              summary: Invalid birthday
              value:
                errors:
                - status: 400
                  title: Bad Request
                  code: BIRTHDAY_IS_NOT_VALID
                  detail: "birthday is not valid, it must be in the past, but not\
                    \ before 1900-01-01"
                  meta:
                    request_id: 1234567890abcdef
                    timestamp: 2025-07-10T14:23:00Z
          schema:
            $ref: "#/components/schemas/Errors"
      description: Invalid birthday value
    OnlyUserCanHaveProfile:
      content:
        application/json:
          examples:
            default:
              summary: Permission denied
              value:
                errors:
                - status: 403
                  title: Forbidden
                  code: ONLY_USER_CAN_HAVE_PROFILE
                  detail: only users can have profile or cabinet
                  meta:
                    request_id: 1234567890abcdef
                    timestamp: 2025-07-10T14:23:00Z
          schema:
            $ref: "#/components/schemas/Errors"
      description: Only user can have profile
    ProfileForUserNotFound:
      content:
        application/json:
          examples:
            default:
              summary: Profile not found
              value:
                errors:
                - status: 404
                  title: Not Found
                  code: PROFILE_FOR_USER_NOT_FOUND
                  detail: "profile for user {user_id} not found"
                  meta:
                    request_id: 1234567890abcdef
                    timestamp: 2025-07-10T14:23:00Z
          schema:
            $ref: "#/components/schemas/Errors"
      description: Profile for user not found
    ProfileForUserAlreadyExists:
      content:
        application/json:
          examples:
            default:
              summary: Conflict
              value:
                errors:
                - status: 409
                  title: Conflict
                  code: PROFILE_FOR_USER_ALREADY_EXISTS
                  detail: "cabinet for user {user_id} already exists"
                  meta:
                    request_id: 1234567890abcdef
                    timestamp: 2025-07-10T14:23:00Z
          schema:
            $ref: "#/components/schemas/Errors"
      description: Profile already exists for user
    ResidenceIsNotValid:
      content:
        application/json:
          examples:
            default:
              summary: Invalid residence
              value:
                errors:
                - status: 400
                  title: Bad Request
                  code: RESIDENCE_IS_NOT_VALID
                  detail: "residence is not valid, it must be a valid country name"
                  meta:
                    request_id: 1234567890abcdef
                    timestamp: 2025-07-10T14:23:00Z
          schema:
            $ref: "#/components/schemas/Errors"
      description: Residence is not valid
    ResidenceUpdateCooldown:
      content:
        application/json:
          examples:
            default:
              summary: Residence update too soon
              value:
                errors:
                - status: 400
                  title: Bad Request
                  code: RESIDENCE_UPDATE_COOLDOWN
                  detail: residence can be updated only once per 100 days
                  meta:
                    request_id: 1234567890abcdef
                    timestamp: 2025-07-10T14:23:00Z
          schema:
            $ref: "#/components/schemas/Errors"
      description: Residence update cooldown
    SexIsNotValid:
      content:
        application/json:
          examples:
            default:
              summary: Invalid sex
              value:
                errors:
                - status: 400
                  title: Bad Request
                  code: SEX_IS_NOT_VALID
                  detail: sex is not valid
                  meta:
                    request_id: 1234567890abcdef
                    timestamp: 2025-07-10T14:23:00Z
          schema:
            $ref: "#/components/schemas/Errors"
      description: Invalid sex value
    SexUpdateCooldown:
      content:
        application/json:
          examples:
            default:
              summary: Sex update too soon
              value:
                errors:
                - status: 400
                  title: Bad Request
                  code: SEX_UPDATE_COOLDOWN
                  detail: sex can be updated only once per year
                  meta:
                    request_id: 1234567890abcdef
                    timestamp: 2025-07-10T14:23:00Z
          schema:
            $ref: "#/components/schemas/Errors"
      description: Sex update cooldown
    UsernameAlreadyTaken:
      content:
        application/json:
          examples:
            default:
              summary: Username already in use
              value:
                errors:
                - status: 400
                  title: Bad Request
                  code: USERNAME_ALREADY_TAKEN
                  detail: This username is already in use by another account
                  meta:
                    request_id: 1234567890abcdef
                    timestamp: 2025-07-10T14:23:00Z
          schema:
            $ref: "#/components/schemas/Errors"
      description: Username already taken
    UsernameIsNotValid:
      content:
        application/json:
          examples:
            default:
              summary: Invalid username
              value:
                errors:
                - status: 400
                  title: Bad Request
                  code: USERNAME_IS_NOT_VALID
                  detail: "username is not valid, it must be 3-32 characters long,\
                    \ allowed characters are: a-z, A-Z, 0-9, _ (underscore), - (dash),\
                    \ . (dot)"
                  meta:
                    request_id: 1234567890abcdef
                    timestamp: 2025-07-10T14:23:00Z
          schema:
            $ref: "#/components/schemas/Errors"
      description: Username is not valid
    UsernameUpdateCooldown:
      content:
        application/json:
          examples:
            default:
              summary: Username update too soon
              value:
                errors:
                - status: 400
                  title: Bad Request
                  code: USERNAME_UPDATE_COOLDOWN
                  detail: username can be updated only once per 14 days
                  meta:
                    request_id: 1234567890abcdef
                    timestamp: 2025-07-10T14:23:00Z
          schema:
            $ref: "#/components/schemas/Errors"
      description: Username update cooldown
  schemas:
    RefreshToken:
      properties:
        data:
          $ref: "#/components/schemas/RefreshToken_data"
      required:
      - data
    CreateUserByAdmin:
      properties:
        data:
          $ref: "#/components/schemas/CreateUserByAdmin_data"
      required:
      - data
    TokensPair:
      properties:
        data:
          $ref: "#/components/schemas/TokensPair_data"
      required:
      - data
    AccessToken:
      properties:
        data:
          $ref: "#/components/schemas/AccessToken_data"
      required:
      - data
    Session:
      properties:
        data:
          $ref: "#/components/schemas/SessionData"
      required:
      - data
    SessionData:
      properties:
        id:
          description: session id
          format: uuid
          type: string
        type:
          enum:
          - user_session
          type: string
        attributes:
          $ref: "#/components/schemas/SessionAttributes"
      required:
      - attributes
      - id
      - type
    SessionAttributes:
      properties:
        user_id:
          description: user id
          format: uuid
          type: string
        client:
          description: client name and version
          type: string
        ip:
          description: IP address
          type: string
        created_at:
          description: session creation date
          format: date-time
          type: string
        last_used:
          description: last used date
          format: date-time
          type: string
      required:
      - client
      - created_at
      - ip
      - last_used
      - user_id
    SessionsCollection:
      properties:
        data:
          $ref: "#/components/schemas/SessionsCollection_data"
      required:
      - data
    User:
      properties:
        data:
          $ref: "#/components/schemas/User_data"
      required:
      - data
    Errors:
      properties:
        errors:
          description: Non empty array of errors occurred during request processing
          items:
            $ref: "#/components/schemas/Errors_errors_inner"
          type: array
      required:
      - errors
    UpdateOwnProfile:
      properties:
        data:
          $ref: "#/components/schemas/UpdateOwnProfile_data"
      required:
      - data
    UpdateProfileByAdmin:
      properties:
        data:
          $ref: "#/components/schemas/UpdateProfileByAdmin_data"
      required:
      - data
    CreateOwnProfile:
      properties:
        data:
          $ref: "#/components/schemas/CreateOwnProfile_data"
      required:
      - data
    Biography:
      properties:
        data:
          $ref: "#/components/schemas/Biography_data"
      required:
      - data
    BiographyAttributes:
      properties:
        birthday:
          description: The birth date of the elector.
          example: 1980-01-01
          format: date-time
          type: string
        sex:
          description: sex of the elector
          type: string
        city:
          description: The city where the elector resides.
          example: Springfield
          type: string
        region:
          description: The region where the elector resides.
          example: Massachusetts
          type: string
        country:
          description: The country where the elector resides.
          example: USA
          type: string
        sex_updated_at:
          format: date-time
          type: string
        residence_updated_at:
          format: date-time
          type: string
    Cabinet:
      properties:
        data:
          $ref: "#/components/schemas/Cabinet_data"
      required:
      - data
    CabinetAttributes:
      properties:
        biography:
          $ref: "#/components/schemas/BiographyAttributes"
      required:
      - biography
    Profile:
      properties:
        data:
          $ref: "#/components/schemas/Profile_data"
      required:
      - data
    ProfileAttributes:
      properties:
        username:
          description: The username of the elector.
          example: johndoe
          type: string
        pseudonym:
          description: "The pseudonym of the elector, if applicable."
          example: John D.
          type: string
        description:
          description: A brief description of the elector.
          example: John Doe is a seasoned politician with over 20 years of experience
            in public service...
          type: string
        avatar:
          description: The URL of the elector's avatar image.
          example: https://example.com/avatars/johndoe.jpg
          format: uri
          type: string
        official:
          description: Indicates if the elector is an official candidate.
          example: true
          type: boolean
        updated_at:
          description: The date and time when the profile was last updated.
          example: 2023-10-01T12:00:00Z
          format: date-time
          type: string
        created_at:
          description: The date and time when the profile was created.
          example: 2023-09-01T12:00:00Z
          format: date-time
          type: string
      required:
      - created_at
      - official
      - updated_at
      - username
    RefreshToken_data_attributes:
      properties:
        refresh_token:
          description: The refresh token to generate a new access token.
          example: eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9...
          type: string
      required:
      - refresh_token
    RefreshToken_data:
      properties:
        type:
          enum:
          - refresh_token
          type: string
        attributes:
          $ref: "#/components/schemas/RefreshToken_data_attributes"
      required:
      - attributes
      - type
    CreateUserByAdmin_data_attributes:
      properties:
        email:
          description: The email address of the admin to be created.
          example: example@example.com
          type: string
        role:
          description: The role of the admin to be created.
          example: admin
          type: string
      required:
      - email
      - role
    CreateUserByAdmin_data:
      properties:
        type:
          enum:
          - create_admin
          type: string
        attributes:
          $ref: "#/components/schemas/CreateUserByAdmin_data_attributes"
      required:
      - attributes
      - type
    TokensPair_data_attributes:
      properties:
        access_token:
          description: Access Token
          type: string
        refresh_token:
          description: Refresh Token
          type: string
      required:
      - access_token
      - refresh_token
    TokensPair_data:
      properties:
        type:
          enum:
          - tokens_pair
          type: string
        attributes:
          $ref: "#/components/schemas/TokensPair_data_attributes"
      required:
      - attributes
      - relationships
      - type
    AccessToken_data_attributes:
      properties:
        refresh_token:
          description: The access token to generate a new access token.
          example: eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9...
          type: string
      required:
      - access_token
    AccessToken_data:
      properties:
        type:
          enum:
          - access_token
          type: string
        attributes:
          $ref: "#/components/schemas/AccessToken_data_attributes"
      required:
      - attributes
      - type
    SessionsCollection_data_attributes:
      properties:
        sessions:
          items:
            $ref: "#/components/schemas/SessionData"
          type: array
      required:
      - sessions
    SessionsCollection_data:
      properties:
        type:
          enum:
          - user_sessions
          type: string
        attributes:
          $ref: "#/components/schemas/SessionsCollection_data_attributes"
      required:
      - attributes
      - type
    User_data_attributes:
      properties:
        email:
          description: Email
          type: string
        role:
          description: Role
          type: string
        subscription:
          description: Subscription
          type: string
        created_at:
          description: Created At
          format: date-time
          type: string
        updated_at:
          description: Updated At
          format: date-time
          type: string
      required:
      - created_at
      - email
      - role
      - subscription
      - updated_at
    User_data:
      properties:
        id:
          description: User ID
          type: string
        type:
          enum:
          - user
          type: string
        attributes:
          $ref: "#/components/schemas/User_data_attributes"
      required:
      - attributes
      - id
      - type
    Errors_errors_inner:
      properties:
        status:
          description: Status is the HTTP status code applicable to this problem
          example: 400
          type: integer
        title:
          description: "Title is a short, human-readable summary of the problem"
          example: Bad Request
          type: string
        code:
          description: "Code is an application-specific error code, expressed as a\
            \ string"
          example: invalid_request
          type: string
        detail:
          description: Detail is a human-readable explanation specific to this occurrence
            of the problem
          example: Request body was expected
          type: string
        meta:
          type: object
      required:
      - status
      - title
    UpdateOwnProfile_data_attributes:
      properties:
        username:
          description: The username of the elector.
          example: johndoe
          type: string
        pseudonym:
          description: The pseudonym of the elector.
          example: John D.
          type: string
        description:
          description: A brief description of the elector.
          example: John Doe is a seasoned politician with over 20 years of experience
            in public service...
          type: string
        avatar:
          description: The URL of the elector's avatar image.
          example: https://example.com/avatars/johndoe.jpg
          format: uri
          type: string
    UpdateOwnProfile_data:
      properties:
        id:
          description: User ID of the elector.
          type: string
        type:
          enum:
          - update_own_profile
          type: string
        attributes:
          $ref: "#/components/schemas/UpdateOwnProfile_data_attributes"
      required:
      - attributes
      - id
      - type
    UpdateProfileByAdmin_data_attributes:
      properties:
        pseudonym:
          type: boolean
        description:
          type: boolean
        avatar:
          type: boolean
    UpdateProfileByAdmin_data:
      properties:
        id:
          description: User ID of the elector.
          type: string
        type:
          enum:
          - reset_profile_by_admin
          type: string
        attributes:
          $ref: "#/components/schemas/UpdateProfileByAdmin_data_attributes"
      required:
      - attributes
      - id
      - type
    CreateOwnProfile_data_attributes:
      properties:
        username:
          description: The username of the elector.
          example: johndoe
          type: string
        pseudonym:
          description: The pseudonym of the elector.
          example: John D.
          type: string
        description:
          description: A brief description of the elector.
          example: John Doe is a seasoned politician with over 20 years of experience
            in public service...
          type: string
        avatar:
          description: The URL of the elector's avatar image.
          example: https://example.com/avatars/johndoe.jpg
          format: uri
          type: string
      required:
      - username
    CreateOwnProfile_data:
      properties:
        id:
          description: User ID of the elector.
          type: string
        type:
          enum:
          - create_own_profile
          type: string
        attributes:
          $ref: "#/components/schemas/CreateOwnProfile_data_attributes"
      required:
      - attributes
      - id
      - type
    Biography_data:
      properties:
        id:
          description: User ID of the elector.
          type: string
        type:
          enum:
          - biography
          type: string
        attributes:
          $ref: "#/components/schemas/BiographyAttributes"
      required:
      - attributes
      - id
      - type
    Cabinet_data:
      properties:
        id:
          description: User ID of the elector.
          type: string
        type:
          enum:
          - cabinet
          type: string
        attributes:
          $ref: "#/components/schemas/CabinetAttributes"
      required:
      - attributes
      - id
      - type
    Profile_data:
      properties:
        id:
          description: User ID of the elector.
          type: string
        type:
          enum:
          - profile
          type: string
        attributes:
          $ref: "#/components/schemas/ProfileAttributes"
      required:
      - attributes
      - id
      - type
