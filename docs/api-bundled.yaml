openapi: 3.1.1
info:
  title: Chains API
  description: Chains API
  version: 0.0.1
paths: {}
components:
  schemas:
    RefreshToken:
      type: object
      required:
        - data
      properties:
        data:
          type: object
          required:
            - type
            - attributes
          properties:
            type:
              type: string
              enum:
                - refresh_token
            attributes:
              type: object
              required:
                - refresh_token
              properties:
                refresh_token:
                  type: string
                  description: The refresh token to generate a new access token.
                  example: eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9...
    CreateUserByAdmin:
      type: object
      required:
        - data
      properties:
        data:
          type: object
          required:
            - type
            - attributes
          properties:
            type:
              type: string
              enum:
                - create_admin
            attributes:
              type: object
              required:
                - email
                - role
              properties:
                email:
                  type: string
                  description: The email address of the admin to be created.
                  example: example@example.com
                role:
                  type: string
                  description: The role of the admin to be created.
                  example: admin
    TokensPair:
      type: object
      required:
        - data
      properties:
        data:
          type: object
          required:
            - type
            - attributes
            - relationships
          properties:
            type:
              type: string
              enum:
                - tokens_pair
            attributes:
              type: object
              required:
                - access_token
                - refresh_token
              properties:
                access_token:
                  type: string
                  description: Access Token
                refresh_token:
                  type: string
                  description: Refresh Token
    AccessToken:
      type: object
      required:
        - data
      properties:
        data:
          type: object
          required:
            - type
            - attributes
          properties:
            type:
              type: string
              enum:
                - access_token
            attributes:
              type: object
              required:
                - access_token
              properties:
                refresh_token:
                  type: string
                  description: The access token to generate a new access token.
                  example: eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9...
    Session:
      type: object
      required:
        - data
      properties:
        data:
          $ref: '#/components/schemas/SessionData'
    SessionData:
      type: object
      required:
        - id
        - type
        - attributes
      properties:
        id:
          type: string
          format: uuid
          description: session id
        type:
          type: string
          enum:
            - user_session
        attributes:
          $ref: '#/components/schemas/SessionAttributes'
    SessionAttributes:
      type: object
      required:
        - user_id
        - client
        - ip
        - created_at
        - last_used
      properties:
        user_id:
          type: string
          format: uuid
          description: user id
        client:
          type: string
          description: client name and version
        ip:
          type: string
          description: IP address
        created_at:
          type: string
          format: date-time
          description: session creation date
        last_used:
          type: string
          format: date-time
          description: last used date
    SessionsCollection:
      type: object
      required:
        - data
      properties:
        data:
          type: object
          required:
            - type
            - attributes
          properties:
            type:
              type: string
              enum:
                - user_sessions
            attributes:
              type: object
              required:
                - sessions
              properties:
                sessions:
                  type: array
                  items:
                    $ref: '#/components/schemas/SessionData'
    User:
      type: object
      required:
        - data
      properties:
        data:
          type: object
          required:
            - id
            - type
            - attributes
          properties:
            id:
              type: string
              description: User ID
            type:
              type: string
              enum:
                - user
            attributes:
              type: object
              required:
                - email
                - role
                - subscription
                - created_at
                - updated_at
              properties:
                email:
                  type: string
                  description: Email
                role:
                  type: string
                  description: Role
                subscription:
                  type: string
                  description: Subscription
                created_at:
                  type: string
                  format: date-time
                  description: Created At
                updated_at:
                  type: string
                  format: date-time
                  description: Updated At
    Errors:
      type: object
      required:
        - errors
      properties:
        errors:
          type: array
          description: Non empty array of errors occurred during request processing
          items:
            type: object
            required:
              - status
              - title
            properties:
              status:
                type: integer
                description: Status is the HTTP status code applicable to this problem
                example: 400
              title:
                type: string
                description: 'Title is a short, human-readable summary of the problem'
                example: Bad Request
              code:
                type: string
                description: 'Code is an application-specific error code, expressed as a string'
                example: invalid_request
              detail:
                type: string
                description: Detail is a human-readable explanation specific to this occurrence of the problem
                example: Request body was expected
              meta:
                type: object
    UpdateOwnProfile:
      type: object
      required:
        - data
      properties:
        data:
          required:
            - id
            - type
            - attributes
          properties:
            id:
              type: string
              description: User ID of the elector.
            type:
              type: string
              enum:
                - update_own_profile
            attributes:
              type: object
              properties:
                username:
                  type: string
                  description: The username of the elector.
                  example: johndoe
                pseudonym:
                  type: string
                  description: The pseudonym of the elector.
                  example: John D.
                description:
                  type: string
                  description: A brief description of the elector.
                  example: John Doe is a seasoned politician with over 20 years of experience in public service...
                avatar:
                  type: string
                  format: uri
                  description: The URL of the elector's avatar image.
                  example: 'https://example.com/avatars/johndoe.jpg'
    UpdateProfileByAdmin:
      type: object
      required:
        - data
      properties:
        data:
          required:
            - id
            - type
            - attributes
          properties:
            id:
              type: string
              description: User ID of the elector.
            type:
              type: string
              enum:
                - reset_profile_by_admin
            attributes:
              type: object
              properties:
                pseudonym:
                  type: boolean
                description:
                  type: boolean
                avatar:
                  type: boolean
    CreateOwnProfile:
      type: object
      required:
        - data
      properties:
        data:
          required:
            - id
            - type
            - attributes
          properties:
            id:
              type: string
              description: User ID of the elector.
            type:
              type: string
              enum:
                - create_own_profile
            attributes:
              type: object
              required:
                - username
              properties:
                username:
                  type: string
                  description: The username of the elector.
                  example: johndoe
                pseudonym:
                  type: string
                  description: The pseudonym of the elector.
                  example: John D.
                description:
                  type: string
                  description: A brief description of the elector.
                  example: John Doe is a seasoned politician with over 20 years of experience in public service...
                avatar:
                  type: string
                  format: uri
                  description: The URL of the elector's avatar image.
                  example: 'https://example.com/avatars/johndoe.jpg'
    Biography:
      type: object
      required:
        - data
      properties:
        data:
          type: object
          required:
            - id
            - type
            - attributes
          properties:
            id:
              type: string
              description: User ID of the elector.
            type:
              type: string
              enum:
                - biography
            attributes:
              $ref: '#/components/schemas/BiographyAttributes'
    BiographyAttributes:
      type: object
      properties:
        birthday:
          type: string
          format: date-time
          description: The birth date of the elector.
          example: '1980-01-01'
        sex:
          type: string
          description: sex of the elector
        city:
          type: string
          description: The city where the elector resides.
          example: Springfield
        region:
          type: string
          description: The region where the elector resides.
          example: Massachusetts
        country:
          type: string
          description: The country where the elector resides.
          example: USA
        sex_updated_at:
          type: string
          format: date-time
        residence_updated_at:
          type: string
          format: date-time
    Cabinet:
      type: object
      required:
        - data
      properties:
        data:
          type: object
          required:
            - id
            - type
            - attributes
          properties:
            id:
              type: string
              description: User ID of the elector.
            type:
              type: string
              enum:
                - cabinet
            attributes:
              $ref: '#/components/schemas/CabinetAttributes'
    CabinetAttributes:
      type: object
      required:
        - biography
      properties:
        biography:
          $ref: '#/components/schemas/BiographyAttributes'
    Profile:
      type: object
      required:
        - data
      properties:
        data:
          type: object
          required:
            - id
            - type
            - attributes
          properties:
            id:
              type: string
              description: User ID of the elector.
            type:
              type: string
              enum:
                - profile
            attributes:
              $ref: '#/components/schemas/ProfileAttributes'
    ProfileAttributes:
      type: object
      required:
        - username
        - official
        - updated_at
        - created_at
      properties:
        username:
          type: string
          description: The username of the elector.
          example: johndoe
        pseudonym:
          type: string
          description: 'The pseudonym of the elector, if applicable.'
          example: John D.
        description:
          type: string
          description: A brief description of the elector.
          example: John Doe is a seasoned politician with over 20 years of experience in public service...
        avatar:
          type: string
          format: uri
          description: The URL of the elector's avatar image.
          example: 'https://example.com/avatars/johndoe.jpg'
        official:
          type: boolean
          description: Indicates if the elector is an official candidate.
          example: true
        updated_at:
          type: string
          format: date-time
          description: The date and time when the profile was last updated.
          example: '2023-10-01T12:00:00Z'
        created_at:
          type: string
          format: date-time
          description: The date and time when the profile was created.
          example: '2023-09-01T12:00:00Z'
  responses:
    Internal:
      description: Internal Server Error
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Errors'
          examples:
            default:
              summary: Internal Server Error
              value:
                errors:
                  - status: 500
                    title: Internal Server Error
                    code: INTERNAL_SERVER_ERROR
                    detail: internal server error
                    meta:
                      request_id: 1234567890abcdef
                      timestamp: '2025-07-10T14:23:00Z'
    UnsupportedMediaType:
      description: Unsupported Media Type
      content:
        application/vnd.api+json:
          schema:
            $ref: '#/components/schemas/Errors'
          examples:
            default:
              summary: Unsupported Media Type Error
              value:
                errors:
                  - status: 415
                    title: Unsupported Media Type
                    code: UNSUPPORTED_MEDIA_TYPE
                    detail: unsupported media type
                    meta:
                      request_id: 1234567890abcdef
                      timestamp: '2025-07-10T14:23:00Z'
    BadRequest:
      description: Bad Request
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Errors'
          examples:
            default:
              summary: Bad Request Error
              value:
                errors:
                  - status: 400
                    title: Bad Request
                    code: BAD_REQUEST
                    detail: bad request
                    meta:
                      request_id: 1234567890abcdef
                      timestamp: '2025-07-10T14:23:00Z'
    Unauthorized:
      description: Unauthorized
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Errors'
          examples:
            default:
              summary: Unauthorized
              value:
                errors:
                  - status: 401
                    title: Unauthorized
                    code: UNAUTHORIZED
                    detail: You must provide a valid authorization params.
                    meta:
                      request_id: 1234567890abcdef
                      timestamp: '2025-07-10T14:23:00Z'
    NoPermissions:
      description: No permission to perform action
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Errors'
          examples:
            default:
              summary: Permission denied
              value:
                errors:
                  - status: 403
                    title: Forbidden
                    code: NO_PERMISSIONS
                    detail: no permission to perform this action
                    meta:
                      request_id: 1234567890abcdef
                      timestamp: '2025-07-10T14:23:00Z'
    SessionClientMismatch:
      description: Session client mismatch
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Errors'
          examples:
            default:
              summary: Mismatched session client
              value:
                errors:
                  - status: 400
                    title: Bad Request
                    code: SESSION_CLIENT_MISMATCH
                    detail: session client mismatch
                    meta:
                      request_id: 1234567890abcdef
                      timestamp: '2025-07-10T14:23:00Z'
    SessionDoesNotBelongToUser:
      description: Session does not belong to user
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Errors'
          examples:
            default:
              summary: Session ownership error
              value:
                errors:
                  - status: 403
                    title: Forbidden
                    code: SESSION_DOES_NOT_BELONG_TO_USER
                    detail: 'session {session_id} does not belong to user {user_id}'
                    meta:
                      request_id: 1234567890abcdef
                      timestamp: '2025-07-10T14:23:00Z'
    SessionNotFound:
      description: Session not found
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Errors'
          examples:
            default:
              summary: Session not found
              value:
                errors:
                  - status: 404
                    title: Not Found
                    code: SESSION_NOT_FOUND
                    detail: 'session {session_id} not found'
                    meta:
                      request_id: 1234567890abcdef
                      timestamp: '2025-07-10T14:23:00Z'
    SessionsForUserNotFound:
      description: No sessions for user
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Errors'
          examples:
            default:
              summary: No sessions found for this user
              value:
                errors:
                  - status: 404
                    title: Not Found
                    code: SESSIONS_FOR_USER_NOT_FOUND
                    detail: 'no sessions found for user {user_id}'
                    meta:
                      request_id: 1234567890abcdef
                      timestamp: '2025-07-10T14:23:00Z'
    SessionTokenMismatch:
      description: Session token mismatch
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Errors'
          examples:
            default:
              summary: Mismatched session token
              value:
                errors:
                  - status: 400
                    title: Bad Request
                    code: SESSION_TOKEN_MISMATCH
                    detail: session token mismatch
                    meta:
                      request_id: 1234567890abcdef
                      timestamp: '2025-07-10T14:23:00Z'
    UserAlreadyExists:
      description: User already exists
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Errors'
          examples:
            default:
              summary: User exists
              value:
                errors:
                  - status: 409
                    title: Conflict
                    code: USER_ALREADY_EXISTS
                    detail: user already exists
                    meta:
                      request_id: 1234567890abcdef
                      timestamp: '2025-07-10T14:23:00Z'
    UserNotFound:
      description: User not found
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Errors'
          examples:
            default:
              summary: User not found
              value:
                errors:
                  - status: 404
                    title: Not Found
                    code: USER_NOT_FOUND
                    detail: 'user {user_id} not found'
                    meta:
                      request_id: 1234567890abcdef
                      timestamp: '2025-07-10T14:23:00Z'
    UserSuspended:
      description: User account suspended
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Errors'
          examples:
            default:
              summary: Suspended user
              value:
                errors:
                  - status: 400
                    title: Bad Request
                    code: USER_SUSPENDED
                    detail: 'user {user_id} is suspended'
                    meta:
                      request_id: 1234567890abcdef
                      timestamp: '2025-07-10T14:23:00Z'
    BirthdayIsAlreadySet:
      description: Birthday already set
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Errors'
          examples:
            default:
              summary: Birthday locked
              value:
                errors:
                  - status: 400
                    title: Bad Request
                    code: BIRTHDAY_IS_ALREADY_SET
                    detail: birthday is already set and cannot be changed
                    meta:
                      request_id: 1234567890abcdef
                      timestamp: '2025-07-10T14:23:00Z'
    BirthdayIsNotValid:
      description: Invalid birthday value
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Errors'
          examples:
            default:
              summary: Invalid birthday
              value:
                errors:
                  - status: 400
                    title: Bad Request
                    code: BIRTHDAY_IS_NOT_VALID
                    detail: 'birthday is not valid, it must be in the past, but not before 1900-01-01'
                    meta:
                      request_id: 1234567890abcdef
                      timestamp: '2025-07-10T14:23:00Z'
    OnlyUserCanHaveProfile:
      description: Only user can have profile
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Errors'
          examples:
            default:
              summary: Permission denied
              value:
                errors:
                  - status: 403
                    title: Forbidden
                    code: ONLY_USER_CAN_HAVE_PROFILE
                    detail: only users can have profile or cabinet
                    meta:
                      request_id: 1234567890abcdef
                      timestamp: '2025-07-10T14:23:00Z'
    ProfileForUserNotFound:
      description: Profile for user not found
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Errors'
          examples:
            default:
              summary: Profile not found
              value:
                errors:
                  - status: 404
                    title: Not Found
                    code: PROFILE_FOR_USER_NOT_FOUND
                    detail: 'profile for user {user_id} not found'
                    meta:
                      request_id: 1234567890abcdef
                      timestamp: '2025-07-10T14:23:00Z'
    ProfileForUserAlreadyExists:
      description: Profile already exists for user
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Errors'
          examples:
            default:
              summary: Conflict
              value:
                errors:
                  - status: 409
                    title: Conflict
                    code: PROFILE_FOR_USER_ALREADY_EXISTS
                    detail: 'cabinet for user {user_id} already exists'
                    meta:
                      request_id: 1234567890abcdef
                      timestamp: '2025-07-10T14:23:00Z'
    ResidenceIsNotValid:
      description: Residence is not valid
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Errors'
          examples:
            default:
              summary: Invalid residence
              value:
                errors:
                  - status: 400
                    title: Bad Request
                    code: RESIDENCE_IS_NOT_VALID
                    detail: 'residence is not valid, it must be a valid country name'
                    meta:
                      request_id: 1234567890abcdef
                      timestamp: '2025-07-10T14:23:00Z'
    ResidenceUpdateCooldown:
      description: Residence update cooldown
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Errors'
          examples:
            default:
              summary: Residence update too soon
              value:
                errors:
                  - status: 400
                    title: Bad Request
                    code: RESIDENCE_UPDATE_COOLDOWN
                    detail: residence can be updated only once per 100 days
                    meta:
                      request_id: 1234567890abcdef
                      timestamp: '2025-07-10T14:23:00Z'
    SexIsNotValid:
      description: Invalid sex value
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Errors'
          examples:
            default:
              summary: Invalid sex
              value:
                errors:
                  - status: 400
                    title: Bad Request
                    code: SEX_IS_NOT_VALID
                    detail: sex is not valid
                    meta:
                      request_id: 1234567890abcdef
                      timestamp: '2025-07-10T14:23:00Z'
    SexUpdateCooldown:
      description: Sex update cooldown
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Errors'
          examples:
            default:
              summary: Sex update too soon
              value:
                errors:
                  - status: 400
                    title: Bad Request
                    code: SEX_UPDATE_COOLDOWN
                    detail: sex can be updated only once per year
                    meta:
                      request_id: 1234567890abcdef
                      timestamp: '2025-07-10T14:23:00Z'
    UsernameAlreadyTaken:
      description: Username already taken
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Errors'
          examples:
            default:
              summary: Username already in use
              value:
                errors:
                  - status: 400
                    title: Bad Request
                    code: USERNAME_ALREADY_TAKEN
                    detail: This username is already in use by another account
                    meta:
                      request_id: 1234567890abcdef
                      timestamp: '2025-07-10T14:23:00Z'
    UsernameIsNotValid:
      description: Username is not valid
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Errors'
          examples:
            default:
              summary: Invalid username
              value:
                errors:
                  - status: 400
                    title: Bad Request
                    code: USERNAME_IS_NOT_VALID
                    detail: 'username is not valid, it must be 3-32 characters long, allowed characters are: a-z, A-Z, 0-9, _ (underscore), - (dash), . (dot)'
                    meta:
                      request_id: 1234567890abcdef
                      timestamp: '2025-07-10T14:23:00Z'
    UsernameUpdateCooldown:
      description: Username update cooldown
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Errors'
          examples:
            default:
              summary: Username update too soon
              value:
                errors:
                  - status: 400
                    title: Bad Request
                    code: USERNAME_UPDATE_COOLDOWN
                    detail: username can be updated only once per 14 days
                    meta:
                      request_id: 1234567890abcdef
                      timestamp: '2025-07-10T14:23:00Z'
